(* Gramática *)

(* --- Header: código que se copia al inicio del .py generado --- *)
{ 
  from src.runtime.token_types import *
}

(* --- Definiciones de clases de caracteres --- *)

let delim    = [' ' '\t']
let ws       = delim+
let letter   = ['A'-'Z''a'-'z']
let digit    = ['0'-'9']
let alnum    = letter | digit
let id       = letter (alnum)*
let number   = digit+ ('.' digit+)? ('E' ['+' '-' ]? digit+ )?

rule tokens =
    ws                          { return None }
  | "###".*[\n]                 { return None }
  | '\n'                        { return EOL }

  /* ——— Keywords ——— */
  | "if"                        { return IF }
  | "else"                      { return ELSE }
  | "while"                     { return WHILE }
  | "for"                       { return FOR }
  | "return"                    { return RETURN }
  | "break"                     { return BREAK }
  | "continue"                  { return CONTINUE }

  /* ——— IDs y números ——— */
  | id                          { return ID }
  | number                      { return NUMBER }

  /* ——— Operadores y puntuación ——— */
  | ":="                        { return ('ASSIGN', lexeme) }
  | '+'                         { return ('PLUS',     lexeme) }
  | '-'                         { return ('MINUS',    lexeme) }
  | '*'                         { return ('TIMES',    lexeme) }
  | '/'                         { return ('DIV',      lexeme) }
  | '('                         { return ('LPAREN',   lexeme) }
  | ')'                         { return ('RPAREN',   lexeme) }
  | ','                         { return ('COMMA',    lexeme) }
  | ';'                         { return ('SEMICOLON',lexeme) }
  | ':'                         { return ('COLON',    lexeme) }
  | '<'                         { return ('LT',       lexeme) }
  | '='                         { return ('EQ',       lexeme) }
  | '>'                         { return ('GT',       lexeme) }
  | eof                         { return EOF }

  /* ——— Catch-all al final ——— */
  | .                           { return ('SYMBOL', lexeme) }


(* --- Trailer: código que se copia al final del .py generado --- *)
{ 
  /* añadir cualquier cleanup o funciones auxiliares */
}